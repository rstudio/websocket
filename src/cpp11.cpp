// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// websocket.cpp
SEXP wsCreate(std::string uri, int loop_id, cpp11::environment robjPublic, cpp11::environment robjPrivate, cpp11::strings accessLogChannels, cpp11::strings errorLogChannels, int maxMessageSize);
extern "C" SEXP _websocket_wsCreate(SEXP uri, SEXP loop_id, SEXP robjPublic, SEXP robjPrivate, SEXP accessLogChannels, SEXP errorLogChannels, SEXP maxMessageSize) {
  BEGIN_CPP11
    return cpp11::as_sexp(wsCreate(cpp11::as_cpp<cpp11::decay_t<std::string>>(uri), cpp11::as_cpp<cpp11::decay_t<int>>(loop_id), cpp11::as_cpp<cpp11::decay_t<cpp11::environment>>(robjPublic), cpp11::as_cpp<cpp11::decay_t<cpp11::environment>>(robjPrivate), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(accessLogChannels), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(errorLogChannels), cpp11::as_cpp<cpp11::decay_t<int>>(maxMessageSize)));
  END_CPP11
}
// websocket.cpp
void wsAppendHeader(SEXP wsc_xptr, std::string key, std::string value);
extern "C" SEXP _websocket_wsAppendHeader(SEXP wsc_xptr, SEXP key, SEXP value) {
  BEGIN_CPP11
    wsAppendHeader(cpp11::as_cpp<cpp11::decay_t<SEXP>>(wsc_xptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(key), cpp11::as_cpp<cpp11::decay_t<std::string>>(value));
    return R_NilValue;
  END_CPP11
}
// websocket.cpp
void wsAddProtocols(SEXP wsc_xptr, cpp11::strings protocols);
extern "C" SEXP _websocket_wsAddProtocols(SEXP wsc_xptr, SEXP protocols) {
  BEGIN_CPP11
    wsAddProtocols(cpp11::as_cpp<cpp11::decay_t<SEXP>>(wsc_xptr), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(protocols));
    return R_NilValue;
  END_CPP11
}
// websocket.cpp
void wsAddProxy(SEXP wsc_xptr, std::string proxy_url);
extern "C" SEXP _websocket_wsAddProxy(SEXP wsc_xptr, SEXP proxy_url) {
  BEGIN_CPP11
    wsAddProxy(cpp11::as_cpp<cpp11::decay_t<SEXP>>(wsc_xptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(proxy_url));
    return R_NilValue;
  END_CPP11
}
// websocket.cpp
void wsAddProxyBasicAuth(SEXP wsc_xptr, std::string username, std::string password);
extern "C" SEXP _websocket_wsAddProxyBasicAuth(SEXP wsc_xptr, SEXP username, SEXP password) {
  BEGIN_CPP11
    wsAddProxyBasicAuth(cpp11::as_cpp<cpp11::decay_t<SEXP>>(wsc_xptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(username), cpp11::as_cpp<cpp11::decay_t<std::string>>(password));
    return R_NilValue;
  END_CPP11
}
// websocket.cpp
void wsConnect(SEXP wsc_xptr);
extern "C" SEXP _websocket_wsConnect(SEXP wsc_xptr) {
  BEGIN_CPP11
    wsConnect(cpp11::as_cpp<cpp11::decay_t<SEXP>>(wsc_xptr));
    return R_NilValue;
  END_CPP11
}
// websocket.cpp
void wsSend(SEXP wsc_xptr, SEXP msg);
extern "C" SEXP _websocket_wsSend(SEXP wsc_xptr, SEXP msg) {
  BEGIN_CPP11
    wsSend(cpp11::as_cpp<cpp11::decay_t<SEXP>>(wsc_xptr), cpp11::as_cpp<cpp11::decay_t<SEXP>>(msg));
    return R_NilValue;
  END_CPP11
}
// websocket.cpp
void wsClose(SEXP wsc_xptr, uint16_t code, std::string reason);
extern "C" SEXP _websocket_wsClose(SEXP wsc_xptr, SEXP code, SEXP reason) {
  BEGIN_CPP11
    wsClose(cpp11::as_cpp<cpp11::decay_t<SEXP>>(wsc_xptr), cpp11::as_cpp<cpp11::decay_t<uint16_t>>(code), cpp11::as_cpp<cpp11::decay_t<std::string>>(reason));
    return R_NilValue;
  END_CPP11
}
// websocket.cpp
std::string wsProtocol(SEXP wsc_xptr);
extern "C" SEXP _websocket_wsProtocol(SEXP wsc_xptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(wsProtocol(cpp11::as_cpp<cpp11::decay_t<SEXP>>(wsc_xptr)));
  END_CPP11
}
// websocket.cpp
std::string wsState(SEXP wsc_xptr);
extern "C" SEXP _websocket_wsState(SEXP wsc_xptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(wsState(cpp11::as_cpp<cpp11::decay_t<SEXP>>(wsc_xptr)));
  END_CPP11
}
// websocket.cpp
void wsUpdateLogChannels(SEXP wsc_xptr, std::string accessOrError, std::string setOrClear, cpp11::strings logChannels);
extern "C" SEXP _websocket_wsUpdateLogChannels(SEXP wsc_xptr, SEXP accessOrError, SEXP setOrClear, SEXP logChannels) {
  BEGIN_CPP11
    wsUpdateLogChannels(cpp11::as_cpp<cpp11::decay_t<SEXP>>(wsc_xptr), cpp11::as_cpp<cpp11::decay_t<std::string>>(accessOrError), cpp11::as_cpp<cpp11::decay_t<std::string>>(setOrClear), cpp11::as_cpp<cpp11::decay_t<cpp11::strings>>(logChannels));
    return R_NilValue;
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_websocket_wsAddProtocols",      (DL_FUNC) &_websocket_wsAddProtocols,      2},
    {"_websocket_wsAddProxy",          (DL_FUNC) &_websocket_wsAddProxy,          2},
    {"_websocket_wsAddProxyBasicAuth", (DL_FUNC) &_websocket_wsAddProxyBasicAuth, 3},
    {"_websocket_wsAppendHeader",      (DL_FUNC) &_websocket_wsAppendHeader,      3},
    {"_websocket_wsClose",             (DL_FUNC) &_websocket_wsClose,             3},
    {"_websocket_wsConnect",           (DL_FUNC) &_websocket_wsConnect,           1},
    {"_websocket_wsCreate",            (DL_FUNC) &_websocket_wsCreate,            7},
    {"_websocket_wsProtocol",          (DL_FUNC) &_websocket_wsProtocol,          1},
    {"_websocket_wsSend",              (DL_FUNC) &_websocket_wsSend,              2},
    {"_websocket_wsState",             (DL_FUNC) &_websocket_wsState,             1},
    {"_websocket_wsUpdateLogChannels", (DL_FUNC) &_websocket_wsUpdateLogChannels, 4},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_websocket(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
